// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Script.sol";
import "solmate/tokens/WETH.sol";
import "nugu/NuguFactory.sol";

import "../contracts/PortfolioRegistry.sol";
import "../contracts/Portfolio.sol";
import "../contracts/PositionRenderer.sol";

// This script prepares all the transaction data that can be used to deploy
// Portfolio and its dependency contracts.
//
// Here are the steps to use it:
// 1. Be sure to update all the constants below: contract addresses and salts.
// 2. Run the script with:
// `forge script ./scripts/Prepare.s.sol --via-ir --optimizer-runs 0`.
// 3. Visit https://app.safe.global/, click on your multisig wallet, then on
// "New transaction" and finally "Transaction builder".
// 4. Paste the address of the Nugu factory and enable the "custom data".
// 5. Then for each data generated by this script (3 in total), you'll need to
// copy and paste it into the "data" field of the transaction builder and click
// the "Add transaction" button.
// 6. After that, a total of 3 transactions must compose the batch. You can then
// hit "Create Batch", and either "Simulate" or directly "Send Batch".
// 7. Last step is simply to follow the instructions to send the transaction.

address constant SAFE_ADDRESS = 0x8cDb0095ceddb092aD592aCE2971e4f364b5E8eE;
address constant NUGU_ADDRESS = 0xe95671B131FD0f401BA6a68F55A79542E27C43De;
address constant WETH_ADDRESS = 0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6;

bytes32 constant REGISTRY_SALT = keccak256("REGISTRY0");
bytes32 constant POSITION_RENDERER_SALT = keccak256("POSITION_RENDERER0");
bytes32 constant PORTFOLIO_SALT = keccak256("PORTFOLIO0");

contract Deploy is Script {
    bytes internal constant PROXY_BYTECODE =
        hex"67363d3d37363d34f03d5260086018f3";
    bytes32 internal constant PROXY_BYTECODE_HASH = keccak256(PROXY_BYTECODE);

    function run() external {
        bytes memory registryDeployData = abi.encodeCall(
            NuguFactory.deploy,
            (
                REGISTRY_SALT,
                abi.encodePacked(
                    type(PortfolioRegistry).creationCode,
                    abi.encode(SAFE_ADDRESS)
                    ),
                0
            )
        );

        bytes memory positionRendererDeployData = abi.encodeCall(
            NuguFactory.deploy,
            (POSITION_RENDERER_SALT, type(PositionRenderer).creationCode, 0)
        );

        address predictedRegistryAddress =
            getDeployed(NUGU_ADDRESS, SAFE_ADDRESS, REGISTRY_SALT);

        address predictedPositionRendererAddress =
            getDeployed(NUGU_ADDRESS, SAFE_ADDRESS, POSITION_RENDERER_SALT);

        bytes memory portfolioDeployData = abi.encodeCall(
            NuguFactory.deploy,
            (
                PORTFOLIO_SALT,
                abi.encodePacked(
                    type(Portfolio).creationCode,
                    abi.encode(
                        WETH_ADDRESS,
                        predictedRegistryAddress,
                        predictedPositionRendererAddress
                    )
                    ),
                0
            )
        );

        console.log("\nRegistry deploy data:");
        console.logBytes(registryDeployData);

        console.log("\nPositionRenderer deploy data:");
        console.logBytes(positionRendererDeployData);

        console.log("\nPortfolio deploy data:");
        console.logBytes(portfolioDeployData);
    }

    function getDeployed(
        address factory,
        address deployer,
        bytes32 salt
    ) internal view returns (address) {
        salt = keccak256(abi.encodePacked(deployer, salt));

        address proxy = Bytes32AddressLib.fromLast20Bytes(
            keccak256(
                abi.encodePacked(
                    bytes1(0xFF), factory, salt, PROXY_BYTECODE_HASH
                )
            )
        );

        return Bytes32AddressLib.fromLast20Bytes(
            keccak256(abi.encodePacked(hex"d694", proxy, hex"01"))
        );
    }
}
